{"version":3,"file":"static/js/7.1ee14ac7.chunk.js","mappings":"8VA0BA,EAnBsB,WACpB,IAAMA,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,WACpBC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAACC,EAAA,EAAD,CACEC,GAAG,kBACHC,MAAM,SACNP,MAAOA,EACPQ,SATa,SAAAC,GACfN,GAASO,EAAAA,EAAAA,IAAaD,EAAEE,cAAcX,SASpCY,KAAK,Y,oJCNLC,GAAQC,EAAAA,EAAAA,KA8Hd,MA5HA,YAAkE,IAApCC,EAAmC,EAAnCA,QAAmC,IAA1BC,gBAAAA,OAA0B,MAAR,KAAQ,EAC/D,GAA8BC,EAAAA,EAAAA,UAAS,CAAEC,KAAM,GAAIC,OAAQ,KAA3D,eAAOC,EAAP,KAAgBC,EAAhB,KACMlB,GAAWC,EAAAA,EAAAA,MACXkB,GAAgBrB,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,kBAC5BqB,GAAgBC,EAAAA,EAAAA,MAStBC,EAAAA,EAAAA,YAAU,WACJT,GACFK,EAAWC,EAAcI,MAAK,SAAAN,GAAO,OAAIA,EAAQd,KAAOU,QAEzD,CAACA,EAAiBM,IAErB,IAYMK,EAAQ,WACZN,EAAW,CAAEH,KAAM,GAAIC,OAAQ,MAsCjC,OACE,SAACS,EAAA,EAAD,CAAef,MAAOA,EAAtB,UACE,UAACgB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,WACE,SAACC,EAAA,GAAD,KACA,UAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,WAQE,SAACC,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAnC,SACGxB,EAAkB,eAAiB,qBAEtC,UAACiB,EAAA,EAAD,CACEH,UAAU,OACVW,SApDW,SAAAhC,GAVI,IAACiC,EAAUC,GAWlClC,EAAEmC,iBAC0B,IAAxBxB,EAAQF,KAAK2B,QAA0C,IAA1BzB,EAAQD,OAAO0B,QAQ5C7B,GACFb,EACE2C,EAAAA,GAAAA,YAA+B,CAC7BxC,GAAIU,EACJE,KAAME,EAAQF,KACdC,OAAQC,EAAQD,UAGpBJ,IACAY,MA7BsBe,EA+BApB,EA/BUqB,EA+BKvB,EAAQF,KA9BxCwB,EAAShB,MACd,SAAAN,GAAO,OAAIA,EAAQF,KAAK6B,gBAAkBJ,EAAUI,iBAkClDxB,EAAc,CACZyB,MAAM,SACNC,YAAY,QAAD,OAAU7B,EAAQF,KAAlB,sCACXgC,iBAAkB,KACjBC,OAAM,gBARThD,EAAS2C,EAAAA,GAAAA,WAA8B1B,IACvCL,IACAY,MArBFJ,EAAc,CACZyB,MAAM,6CACNC,YAAY,+CACZC,iBAAkB,KACjBC,OAAM,gBA8CHC,YAAU,EACVlB,GAAI,CAAEmB,GAAI,GAJZ,WAME,SAAChD,EAAA,EAAD,CACEiD,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTlD,GAAG,OACHC,MAAM,OACNW,KAAK,OACLuC,aAAa,OACbC,WAAS,EACT1D,MAAOoB,EAAQF,KACfV,SA/FS,SAAAC,GACnB,MAAwBA,EAAEE,cAAlBO,EAAR,EAAQA,KAAMlB,EAAd,EAAcA,MACdqB,GAAW,SAAAsC,GACT,OAAO,kBAAKA,GAAZ,cAAwBzC,EAAOlB,WA8FzB,SAAC,IAAD,CACEuD,UAAQ,EACRvD,MAAOoB,EAAQD,OACfX,SAvFW,SAAAR,GACrBqB,GAAW,SAAAsC,GACT,OAAO,kBAAKA,GAAZ,IAAuBxC,OAAQnB,QAsFvB8B,UAAWzB,EAAAA,KAEb,SAACuD,EAAA,EAAD,CACEhD,KAAK,SACL4C,WAAS,EACThB,QAAQ,YACRN,GAAI,CAAEmB,GAAI,EAAGQ,GAAI,GAJnB,SAMG7C,EAAkB,eAAiB,oBC/G5C8C,EAAQ,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,IACPC,QAAS,mBACTC,OAAQ,iBACRC,UAAW,GACXC,EAAG,GA4HL,EA1HqB,WACnB,IAAM7B,GAAWzC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,qBACvBC,GAAWC,EAAAA,EAAAA,MACjB,GAA8Ba,EAAAA,EAAAA,UAAS,IAAvC,eAAOuD,EAAP,KAAgBC,EAAhB,KACMlD,GAAgBC,EAAAA,EAAAA,KACtB,GAAsCP,EAAAA,EAAAA,WAAS,GAA/C,eAAOyD,EAAP,KAAoBC,EAApB,KACA,GAA8C1D,EAAAA,EAAAA,UAAS,IAAvD,eAAOD,EAAP,KAAwB4D,EAAxB,KAGMC,EAAmB,WACvBF,GAAe,GACfC,EAAmB,KAmCrB,OACE,iCACE,UAAC/C,EAAA,EAAD,CAAWE,SAAS,KAAKG,GAAI,CAAEmB,GAAI,GAAnC,WACE,UAACpB,EAAA,EAAD,CACEC,GAAI,CACFE,QAAS,OACTE,WAAY,SACZwC,eAAgB,gBAJpB,WAOE,SAACC,EAAA,EAAD,CAAY,aAAW,MAAMC,KAAK,QAAQC,QAhD1B,kBAAMN,GAAe,IAgDrC,UACE,SAACO,EAAA,EAAD,OAEF,SAAC,EAAD,KACA,SAACH,EAAA,EAAD,CACE,aAAW,SACXC,KAAK,QACLG,SAAUX,EAAQ3B,OAAS,EAC3BoC,QArCW,WACnB,IAAMG,EAAgBZ,EACnBa,KAAI,SAAAC,GAAU,OAAI5C,EAAShB,MAAK,qBAAGpB,KAAgBgF,KAAYpE,QAC/DqE,KAAK,MACRhE,EAAc,CACZ0B,YAAY,iCAAD,OAAmCmC,EAAnC,8BAEVI,MAAK,WACJhB,EAAQa,KAAI,SAAA/E,GAAE,OAAIH,EAAS2C,EAAAA,GAAAA,cAAiCxC,OAC5DmE,EAAW,OAEZtB,OAAM,gBAsBH,UAME,SAACsC,EAAA,EAAD,UAGJ,SAACC,EAAA,EAAD,CACEC,OAAK,EACLzD,GAAI,CAAEiC,MAAO,OAAQpC,SAAU,IAAKqC,QAAS,oBAF/C,SAIG1B,EAAS2C,KAAI,YAA2B,IA3D5BrF,EA2DIM,EAAuB,EAAvBA,GAAIY,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACnByE,EAAO,wCAAoCtF,GACjD,OACE,SAACuF,EAAA,GAAD,CAEEC,iBACE,SAACC,EAAA,EAAD,CACEC,KAAK,MACLxF,UAnEGR,EAmEoBM,EAnEX,WAC5B,IAAM2F,EAAezB,EAAQ0B,QAAQlG,GAC/BmG,GAAU,OAAO3B,IAED,IAAlByB,EACFE,EAAWC,KAAKpG,GAEhBmG,EAAWE,OAAOJ,EAAc,GAGlCxB,EAAW0B,KA0DK3B,SAAkC,IAAzBA,EAAQ0B,QAAQ5F,GACzBgG,WAAY,CAAE,kBAAmBV,KAGrCW,gBAAc,EAVhB,UAYE,UAACC,EAAA,EAAD,CAAgBvB,QAAS,kBA/CR,SAAA3E,GAC7BsE,EAAmBtE,GACnBqE,GAAe,GA6C4B8B,CAAuBnG,IAAtD,WACE,SAACoG,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CAAQC,IAAG,UAAK1F,QAElB,SAAC2F,EAAA,EAAD,CAAcvG,GAAIsF,EAASkB,QAAO,UAAK5F,MACvC,SAAC2F,EAAA,EAAD,CACE3E,GAAI,CAAE6E,UAAW,SACjBD,QAAO,UAAK3F,SAlBXb,WA0BdoE,IACC,SAACsC,EAAA,EAAD,CACEC,KAAMvC,EACN3D,QAAS8D,EACT,kBAAgB,oBAChB,mBAAiB,0BAJnB,UAME,SAAC5C,EAAA,EAAD,CAAKC,GAAI4B,EAAT,UACE,SAAC,EAAD,CACE/C,QAAS8D,EACT7D,gBAAiBA,GAAoC,eC3IpD,SAASkG,IACtB,IAAM/G,GAAWC,EAAAA,EAAAA,MAIjB,OAHAqB,EAAAA,EAAAA,YAAU,WACRtB,EAAS2C,EAAAA,GAAAA,mBACR,CAAC3C,KAEF,+BACE,SAAC,IAAD,WACE,SAAC,EAAD","sources":["components/ContactSearch/ContactSearch.jsx","components/AddEditContactForm/AddEditContactForm.jsx","components/ContactsList/ContactsList.jsx","components/ContactsView/ContactsView.jsx"],"sourcesContent":["import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { contactsSelectors, changeFilter } from 'redux/contacts';\nimport TextField from '@mui/material/TextField';\n\nconst ContactSearch = () => {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(changeFilter(e.currentTarget.value));\n  };\n\n  return (\n    <TextField\n      id=\"contacts-search\"\n      label=\"Search\"\n      value={value}\n      onChange={onChange}\n      type=\"search\"\n    />\n  );\n};\n\nexport default ContactSearch;\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport ReactPhoneInput from 'react-phone-input-material-ui';\nimport { useConfirm } from 'material-ui-confirm';\nimport PropTypes from 'prop-types';\n\nconst theme = createTheme();\n\nfunction AddEditContactForm({ onClose, contactIdToEdit = null }) {\n  const [contact, setContact] = useState({ name: '', number: '' });\n  const dispatch = useDispatch();\n  const addedContacts = useSelector(contactsSelectors.getAddedContacts);\n  const confirmDialog = useConfirm();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setContact(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  useEffect(() => {\n    if (contactIdToEdit) {\n      setContact(addedContacts.find(contact => contact.id === contactIdToEdit));\n    }\n  }, [contactIdToEdit, addedContacts]);\n\n  const onNumberChange = value => {\n    setContact(prevState => {\n      return { ...prevState, number: value };\n    });\n  };\n\n  const nameAlreadyExist = (contacts, nameToAdd) => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === nameToAdd.toLowerCase()\n    );\n  };\n\n  const reset = () => {\n    setContact({ name: '', number: '' });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contact.name.length === 0 || contact.number.length === 0) {\n      confirmDialog({\n        title: `Fields \"Name\" or \"Number\" can't be empty!`,\n        description: `Type \"Name\" and \"Number\" to relevant fields!`,\n        cancellationText: '',\n      }).catch(() => {});\n      return;\n    }\n    if (contactIdToEdit) {\n      dispatch(\n        contactsOperations.editContact({\n          id: contactIdToEdit,\n          name: contact.name,\n          number: contact.number,\n        })\n      );\n      onClose();\n      reset();\n    } else {\n      if (!nameAlreadyExist(addedContacts, contact.name)) {\n        dispatch(contactsOperations.addContact(contact));\n        onClose();\n        reset();\n      } else {\n        confirmDialog({\n          title: `Oh no!`,\n          description: `Name ${contact.name} already exists in your phone book`,\n          cancellationText: '',\n        }).catch(() => {});\n      }\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            {contactIdToEdit ? 'Edit contact' : 'Add new contact'}\n          </Typography>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"name\"\n              label=\"Name\"\n              name=\"name\"\n              autoComplete=\"Name\"\n              autoFocus\n              value={contact.name}\n              onChange={handleChange}\n            />\n            <ReactPhoneInput\n              required\n              value={contact.number}\n              onChange={onNumberChange} // passed function receives the phone value\n              component={TextField}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              {contactIdToEdit ? 'Save changes' : 'Add'}\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default AddEditContactForm;\n\nAddEditContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  contactIdToEdit: PropTypes.string,\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport Container from '@mui/material/Container';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Checkbox from '@mui/material/Checkbox';\nimport Avatar from '@mui/material/Avatar';\nimport { useState } from 'react';\nimport ContactSearch from 'components/ContactSearch/ContactSearch';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport IconButton from '@mui/material/IconButton';\nimport Box from '@mui/material/Box';\nimport AddCircleOutlineOutlinedIcon from '@mui/icons-material/AddCircleOutlineOutlined';\nimport { useConfirm } from 'material-ui-confirm';\nimport Modal from '@mui/material/Modal';\nimport AddEditContactForm from 'components/AddEditContactForm/AddEditContactForm';\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\nconst ContactsList = () => {\n  const contacts = useSelector(contactsSelectors.getFilteredContacts);\n  const dispatch = useDispatch();\n  const [checked, setChecked] = useState([]);\n  const confirmDialog = useConfirm();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [contactIdToEdit, setContactIdToEdit] = useState('');\n\n  const handleOpenModal = () => setIsModalOpen(true);\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setContactIdToEdit('');\n  };\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const handleDelete = () => {\n    const namesToDelete = checked\n      .map(idToDelete => contacts.find(({ id }) => id === idToDelete).name)\n      .join(', ');\n    confirmDialog({\n      description: `Are you really want to delete ${namesToDelete} from your contact book?`,\n    })\n      .then(() => {\n        checked.map(id => dispatch(contactsOperations.deleteContact(id)));\n        setChecked([]);\n      })\n      .catch(() => {});\n  };\n\n  const handleEditContactClick = id => {\n    setContactIdToEdit(id);\n    setIsModalOpen(true);\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"xs\" sx={{ mt: 2 }}>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-around',\n          }}\n        >\n          <IconButton aria-label=\"add\" size=\"large\" onClick={handleOpenModal}>\n            <AddCircleOutlineOutlinedIcon />\n          </IconButton>\n          <ContactSearch />\n          <IconButton\n            aria-label=\"delete\"\n            size=\"large\"\n            disabled={checked.length < 1}\n            onClick={handleDelete}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Box>\n        <List\n          dense\n          sx={{ width: '100%', maxWidth: 385, bgcolor: 'background.paper' }}\n        >\n          {contacts.map(({ id, name, number }) => {\n            const labelId = `checkbox-list-secondary-label-${id}`;\n            return (\n              <ListItem\n                key={id}\n                secondaryAction={\n                  <Checkbox\n                    edge=\"end\"\n                    onChange={handleToggle(id)}\n                    checked={checked.indexOf(id) !== -1}\n                    inputProps={{ 'aria-labelledby': labelId }}\n                  />\n                }\n                disablePadding\n              >\n                <ListItemButton onClick={() => handleEditContactClick(id)}>\n                  <ListItemAvatar>\n                    <Avatar alt={`${name}`} />\n                  </ListItemAvatar>\n                  <ListItemText id={labelId} primary={`${name}`} />\n                  <ListItemText\n                    sx={{ textAlign: 'right' }}\n                    primary={`${number}`}\n                  />\n                </ListItemButton>\n              </ListItem>\n            );\n          })}\n        </List>\n      </Container>\n      {isModalOpen && (\n        <Modal\n          open={isModalOpen}\n          onClose={handleCloseModal}\n          aria-labelledby=\"modal-modal-title\"\n          aria-describedby=\"modal-modal-description\"\n        >\n          <Box sx={style}>\n            <AddEditContactForm\n              onClose={handleCloseModal}\n              contactIdToEdit={contactIdToEdit ? contactIdToEdit : null}\n            />\n          </Box>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;\n","import ContactsList from 'components/ContactsList/ContactsList';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { ConfirmProvider } from 'material-ui-confirm';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <ConfirmProvider>\n        <ContactsList />\n      </ConfirmProvider>\n    </>\n  );\n}\n"],"names":["value","useSelector","contactsSelectors","dispatch","useDispatch","TextField","id","label","onChange","e","changeFilter","currentTarget","type","theme","createTheme","onClose","contactIdToEdit","useState","name","number","contact","setContact","addedContacts","confirmDialog","useConfirm","useEffect","find","reset","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Typography","variant","onSubmit","contacts","nameToAdd","preventDefault","length","contactsOperations","toLowerCase","title","description","cancellationText","catch","noValidate","mt","margin","required","fullWidth","autoComplete","autoFocus","prevState","Button","mb","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","checked","setChecked","isModalOpen","setIsModalOpen","setContactIdToEdit","handleCloseModal","justifyContent","IconButton","size","onClick","AddCircleOutlineOutlined","disabled","namesToDelete","map","idToDelete","join","then","Delete","List","dense","labelId","ListItem","secondaryAction","Checkbox","edge","currentIndex","indexOf","newChecked","push","splice","inputProps","disablePadding","ListItemButton","handleEditContactClick","ListItemAvatar","Avatar","alt","ListItemText","primary","textAlign","Modal","open","ContactsView"],"sourceRoot":""}