{"version":3,"file":"static/js/7.1ee14ac7.chunk.js","mappings":"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","sources":["components/ContactSearch/ContactSearch.jsx","components/AddEditContactForm/AddEditContactForm.jsx","components/ContactsList/ContactsList.jsx","components/ContactsView/ContactsView.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { contactsSelectors, changeFilter } from 'redux/contacts';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst ContactSearch = () => {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = e => {\r\n    dispatch(changeFilter(e.currentTarget.value));\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      id=\"contacts-search\"\r\n      label=\"Search\"\r\n      value={value}\r\n      onChange={onChange}\r\n      type=\"search\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContactSearch;\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport ReactPhoneInput from 'react-phone-input-material-ui';\r\nimport { useConfirm } from 'material-ui-confirm';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst theme = createTheme();\r\n\r\nfunction AddEditContactForm({ onClose, contactIdToEdit = null }) {\r\n  const [contact, setContact] = useState({ name: '', number: '' });\r\n  const dispatch = useDispatch();\r\n  const addedContacts = useSelector(contactsSelectors.getAddedContacts);\r\n  const confirmDialog = useConfirm();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    setContact(prevState => {\r\n      return { ...prevState, [name]: value };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (contactIdToEdit) {\r\n      setContact(addedContacts.find(contact => contact.id === contactIdToEdit));\r\n    }\r\n  }, [contactIdToEdit, addedContacts]);\r\n\r\n  const onNumberChange = value => {\r\n    setContact(prevState => {\r\n      return { ...prevState, number: value };\r\n    });\r\n  };\r\n\r\n  const nameAlreadyExist = (contacts, nameToAdd) => {\r\n    return contacts.find(\r\n      contact => contact.name.toLowerCase() === nameToAdd.toLowerCase()\r\n    );\r\n  };\r\n\r\n  const reset = () => {\r\n    setContact({ name: '', number: '' });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (contact.name.length === 0 || contact.number.length === 0) {\r\n      confirmDialog({\r\n        title: `Fields \"Name\" or \"Number\" can't be empty!`,\r\n        description: `Type \"Name\" and \"Number\" to relevant fields!`,\r\n        cancellationText: '',\r\n      }).catch(() => {});\r\n      return;\r\n    }\r\n    if (contactIdToEdit) {\r\n      dispatch(\r\n        contactsOperations.editContact({\r\n          id: contactIdToEdit,\r\n          name: contact.name,\r\n          number: contact.number,\r\n        })\r\n      );\r\n      onClose();\r\n      reset();\r\n    } else {\r\n      if (!nameAlreadyExist(addedContacts, contact.name)) {\r\n        dispatch(contactsOperations.addContact(contact));\r\n        onClose();\r\n        reset();\r\n      } else {\r\n        confirmDialog({\r\n          title: `Oh no!`,\r\n          description: `Name ${contact.name} already exists in your phone book`,\r\n          cancellationText: '',\r\n        }).catch(() => {});\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            {contactIdToEdit ? 'Edit contact' : 'Add new contact'}\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            onSubmit={handleSubmit}\r\n            noValidate\r\n            sx={{ mt: 1 }}\r\n          >\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name\"\r\n              label=\"Name\"\r\n              name=\"name\"\r\n              autoComplete=\"Name\"\r\n              autoFocus\r\n              value={contact.name}\r\n              onChange={handleChange}\r\n            />\r\n            <ReactPhoneInput\r\n              required\r\n              value={contact.number}\r\n              onChange={onNumberChange} // passed function receives the phone value\r\n              component={TextField}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              {contactIdToEdit ? 'Save changes' : 'Add'}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default AddEditContactForm;\r\n\r\nAddEditContactForm.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  contactIdToEdit: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport Container from '@mui/material/Container';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { useState } from 'react';\r\nimport ContactSearch from 'components/ContactSearch/ContactSearch';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Box from '@mui/material/Box';\r\nimport AddCircleOutlineOutlinedIcon from '@mui/icons-material/AddCircleOutlineOutlined';\r\nimport { useConfirm } from 'material-ui-confirm';\r\nimport Modal from '@mui/material/Modal';\r\nimport AddEditContactForm from 'components/AddEditContactForm/AddEditContactForm';\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 400,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\nconst ContactsList = () => {\r\n  const contacts = useSelector(contactsSelectors.getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n  const [checked, setChecked] = useState([]);\r\n  const confirmDialog = useConfirm();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [contactIdToEdit, setContactIdToEdit] = useState('');\r\n\r\n  const handleOpenModal = () => setIsModalOpen(true);\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    setContactIdToEdit('');\r\n  };\r\n\r\n  const handleToggle = value => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    const namesToDelete = checked\r\n      .map(idToDelete => contacts.find(({ id }) => id === idToDelete).name)\r\n      .join(', ');\r\n    confirmDialog({\r\n      description: `Are you really want to delete ${namesToDelete} from your contact book?`,\r\n    })\r\n      .then(() => {\r\n        checked.map(id => dispatch(contactsOperations.deleteContact(id)));\r\n        setChecked([]);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const handleEditContactClick = id => {\r\n    setContactIdToEdit(id);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container maxWidth=\"xs\" sx={{ mt: 2 }}>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-around',\r\n          }}\r\n        >\r\n          <IconButton aria-label=\"add\" size=\"large\" onClick={handleOpenModal}>\r\n            <AddCircleOutlineOutlinedIcon />\r\n          </IconButton>\r\n          <ContactSearch />\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            size=\"large\"\r\n            disabled={checked.length < 1}\r\n            onClick={handleDelete}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Box>\r\n        <List\r\n          dense\r\n          sx={{ width: '100%', maxWidth: 385, bgcolor: 'background.paper' }}\r\n        >\r\n          {contacts.map(({ id, name, number }) => {\r\n            const labelId = `checkbox-list-secondary-label-${id}`;\r\n            return (\r\n              <ListItem\r\n                key={id}\r\n                secondaryAction={\r\n                  <Checkbox\r\n                    edge=\"end\"\r\n                    onChange={handleToggle(id)}\r\n                    checked={checked.indexOf(id) !== -1}\r\n                    inputProps={{ 'aria-labelledby': labelId }}\r\n                  />\r\n                }\r\n                disablePadding\r\n              >\r\n                <ListItemButton onClick={() => handleEditContactClick(id)}>\r\n                  <ListItemAvatar>\r\n                    <Avatar alt={`${name}`} />\r\n                  </ListItemAvatar>\r\n                  <ListItemText id={labelId} primary={`${name}`} />\r\n                  <ListItemText\r\n                    sx={{ textAlign: 'right' }}\r\n                    primary={`${number}`}\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n      {isModalOpen && (\r\n        <Modal\r\n          open={isModalOpen}\r\n          onClose={handleCloseModal}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <AddEditContactForm\r\n              onClose={handleCloseModal}\r\n              contactIdToEdit={contactIdToEdit ? contactIdToEdit : null}\r\n            />\r\n          </Box>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n","import ContactsList from 'components/ContactsList/ContactsList';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { contactsOperations } from 'redux/contacts';\r\nimport { ConfirmProvider } from 'material-ui-confirm';\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n  return (\r\n    <>\r\n      <ConfirmProvider>\r\n        <ContactsList />\r\n      </ConfirmProvider>\r\n    </>\r\n  );\r\n}\r\n"],"names":["value","useSelector","contactsSelectors","dispatch","useDispatch","TextField","id","label","onChange","e","changeFilter","currentTarget","type","theme","createTheme","onClose","contactIdToEdit","useState","name","number","contact","setContact","addedContacts","confirmDialog","useConfirm","useEffect","find","reset","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Typography","variant","onSubmit","contacts","nameToAdd","preventDefault","length","contactsOperations","toLowerCase","title","description","cancellationText","catch","noValidate","mt","margin","required","fullWidth","autoComplete","autoFocus","prevState","Button","mb","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","checked","setChecked","isModalOpen","setIsModalOpen","setContactIdToEdit","handleCloseModal","justifyContent","IconButton","size","onClick","AddCircleOutlineOutlined","disabled","namesToDelete","map","idToDelete","join","then","Delete","List","dense","labelId","ListItem","secondaryAction","Checkbox","edge","currentIndex","indexOf","newChecked","push","splice","inputProps","disablePadding","ListItemButton","handleEditContactClick","ListItemAvatar","Avatar","alt","ListItemText","primary","textAlign","Modal","open","ContactsView"],"sourceRoot":""}